require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"androidSnackbar":[function(require,module,exports){
exports.snackbar = function(snackbarMessage, actionText, textColor, twoLines) {
  var createActionBTN, makeActionBTN, snackbarMult, snackbarText, textHeight;
  if (twoLines === true) {
    snackbarMult = 1.44;
  } else {
    snackbarMult = 1;
  }
  if (snackbarMult === 1.44) {
    textHeight = 120;
  } else {
    textHeight = 60;
  }
  if (actionText === null) {
    makeActionBTN = false;
  } else {
    makeActionBTN = true;
  }
  if (textColor === null) {
    textColor = "rgba(128,203,196,1)";
  }
  window["snackbarBG"] = new Layer({
    name: "snackbarBG",
    maxY: Screen.height + 168,
    width: Screen.width,
    height: 168 * snackbarMult,
    backgroundColor: "rgba(50,50,50,1)",
    opacity: 1,
    shadowX: 0,
    shadowY: 0,
    shadowBlur: 6,
    shadowColor: "rgba(0,0,0,0.5)"
  });
  snackbarBG.states.add({
    up: {
      maxY: Screen.height
    },
    down: {
      maxY: Screen.height + snackbarBG.height
    }
  });
  snackbarBG.states.animationOptions = {
    curve: "spring(300,45,0)"
  };
  snackbarText = new Layer({
    name: "snackbarText",
    superLayer: snackbarBG,
    x: 56,
    y: 56,
    width: 702,
    height: textHeight,
    backgroundColor: null,
    opacity: 0
  });
  snackbarText.html = snackbarMessage;
  snackbarText.style = {
    "font-size": "42px",
    "line-height": "60px",
    "font-family": "Roboto-Regular, Arial, sans-serif",
    "color": "#fff"
  };
  snackbarText.states.add({
    up: {
      opacity: 1
    }
  });
  snackbarText.states.animationOptions = {
    curve: "ease-in-out",
    time: 0.3,
    delay: 0.2
  };
  createActionBTN = function() {
    window["snackbarActionBTN"] = new Layer({
      name: "snackbarActionBTN",
      superLayer: snackbarBG,
      maxX: snackbarBG.width,
      width: 300,
      height: snackbarBG.height,
      backgroundColor: null,
      opacity: 0
    });
    snackbarActionBTN.states.add({
      up: {
        opacity: 1
      }
    });
    snackbarActionBTN.states.animationOptions = {
      curve: "ease-in-out",
      time: 0.3,
      delay: 0.2
    };
    window["snackbarActionText"] = new Layer({
      name: actionText,
      superLayer: snackbarActionBTN,
      midX: snackbarActionBTN.width / 2,
      midY: snackbarActionBTN.height / 2,
      width: snackbarActionBTN.width,
      height: 60,
      backgroundColor: null
    });
    snackbarActionText.html = actionText;
    snackbarActionText.style = {
      "font-size": "42px",
      "line-height": "60px",
      "font-family": "Roboto-Medium, Arial-Medium, sans-serif",
      "font-weight": "Medium",
      "text-transform": "uppercase",
      "color": textColor,
      "text-align": "center"
    };
    snackbarActionBTN.states["switch"]("up");
    return snackbarActionBTN.on(Events.Click, function() {
      snackbarBG.states["switch"]("down");
      return snackbarBG.on(Events.AnimationEnd, function() {
        return this.destroy();
      });
    });
  };
  if (makeActionBTN === true) {
    createActionBTN();
  } else {
    snackbarText.width = 956;
  }
  snackbarBG.states["switch"]("up");
  snackbarText.states["switch"]("up");
  return snackbarBG.on(Events.AnimationEnd, function() {
    return Utils.delay(8, function() {
      snackbarBG.states["switch"]("down");
      return snackbarBG.on(Events.AnimationEnd, function() {
        return this.destroy();
      });
    });
  });
};


},{}]},{},[])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
